#!/usr/bin/ruby

require           'optparse'
require           'rubygems'
gem               'aws-sdk'
require           'aws-sdk'
require           'erb'

# Options Parsing
options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

	# Define the options, and what they do
	options[:no_update] = false
	opts.on( '--no-update', 'Do not update crontab after making leader' ) do
	 options[:no_update] = true
	end

	# This displays the help screen, all programs are
	# assumed to have this option.
	opts.on( '-h', '--help', 'Display this screen' ) do
	 puts opts
	 exit
	end
end
optparse.parse!

instance_id = `/opt/aws/bin/ec2-metadata -i | awk '{print $2}'`.strip
availability_zone = `/opt/aws/bin/ec2-metadata -z | awk '{print $2}'`.strip
region            =   availability_zone.slice(0..availability_zone.length-2)

ec2 = Aws::EC2::Client.new(region: region)
instance = ec2.describe_instances(instance_ids: [instance_id]).reservations.first.instances.first
# turn the array of tags into a hash
tags = Hash.new.tap { |h| instance.tags.each { |t| h[t.key] = t.value } }

environment_name = tags["elasticbeanstalk:environment-name"]

leader_instances = ec2.describe_instances.reservations.to_a.inject([]) do |m, r|
  i = r.instances.first
  i_tags = Hash.new.tap { |h| i.tags.each { |t| h[t.key] = t.value } }
	m << i.instance_id if i_tags["elasticbeanstalk:environment-name"] == environment_name &&
		i.state.name == "running"  &&
		i_tags["leader"] == "true"
	m
end

if leader_instances.count < 1
  ec2.create_tags(resources: [instance_id], tags: [{key: 'leader', value: 'true'}] )
end

unless options[:no_update]
	`/usr/local/bin/bundle exec setup_cron`
end
